#lang sicp
(define (square x)
  (* x x))

;; stream primitives
(define (stream-car stream)
  (car stream))

(define (stream-cdr stream)
  (force (cdr stream)))

(define (stream-cadr stream)
  (stream-car (stream-cdr stream)))

;; stream functors
(define (stream-filter pred? stream)
  (cond ((stream-null? stream) stream)
        ((pred? (stream-car stream))
         (cons-stream (stream-car stream) (stream-filter pred? (stream-cdr stream))))
        (else (stream-filter pred? (stream-cdr stream)))))

(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))

(define (stream-map proc . streams)
  (cons-stream (apply proc (map stream-car streams))
               (apply stream-map (cons proc (map stream-cdr streams)))))

(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))


;; stream helpers
(define (show-stream S n)
  (if (= n 0)
      (display (stream-car S))
      (begin
        (display (stream-car S))
        (newline)
        (show-stream (stream-cdr S) (- n 1)))))

(define (create-stream lst)
    (if (null? lst)
        the-empty-stream
        (cons-stream
         (car lst)
         (create-stream (cdr lst)))))

(define (add-streams s1 s2)
  (stream-map + s1 s2))

; test streams
(define zeroes
  (cons-stream 0 zeroes))
(define ones
  (cons-stream 1 ones))

(define integers
  (cons-stream 1 (add-streams ones integers)))

; revamp of improve sqrt function from ch1
; streams "improvements" to sqrt improve
(define (average a b)
  (/ (+ a b) 2))
(define (sqrt-improve guess x) (average guess (/ x guess)))
(define (sqrt-stream x)
  (define guesses
    (cons-stream 1.0 (stream-map (lambda (guess) (sqrt-improve guess x)) guesses)))
  guesses)

; partial sums and scale-stream as foundations for pi-stream
(define (partial-sums stream)
  (cons-stream (stream-car stream) (stream-map (lambda (x) (+ x (stream-car stream))) (partial-sums (stream-cdr stream)))))

(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor)) stream))

; pi approximation
(define (pi-summands n)
  (cons-stream (/ 1.0 n) (stream-map - (pi-summands (+ n 2)))))

(define pi-stream
  (scale-stream (partial-sums (pi-summands 1)) 4))

; accelerator to converge to infinite sum approximation
(define (euler-transform s)
  (let ((s0 (stream-ref s 0)) (s1 (stream-ref s 1)) (s2 (stream-ref s 2)))
    (cons-stream
     (- s2 (/ (square (- s2 s1)) (+ s0 (* -2 s1) s2)))
     (euler-transform (stream-cdr s)))))


; tableau: accelerate the accelerator by recursively calling it on a stream
(define (make-tableau transform s)
  (cons-stream s (make-tableau transform (transform s))))

(define (accelerated-sequence transform s)
  (stream-map stream-car (make-tableau transform s)))

;; 3.63: Why is sqrt-stream below less efficient than one defined earlier in section?
(define (louis-reasoner-sqrt-stream x)
  (cons-stream 1.0 (stream-map (lambda (guess) (sqrt-improve guess x)) (louis-reasoner-sqrt-stream x))))

; Since earlier proc calls internally defined guesses proc -- it allows for that function to be memoized since it's stored in memory.
;    sqrt-stream above doesn't memoize calls to earlier guesses. It calls stream-cdr redundantly since it must go through first
;        parts of stream to get values that determine later parts.
;    If implementation of delay didn't include memo-proc, then these procs would hold same efficiency


;; 3.64: stream-limit -- find difference of two successive elements within tolerance

; iterative track prev value
;(define (stream-limit S tolerance)
;  (define (prev-value stream last)
;    (cond ((<= (abs (- (stream-car stream) last)) tolerance) (stream-car stream))
;          (else (prev-value (stream-cdr stream) (stream-car stream)))))
;  (prev-value S (- (stream-car S) (+ tolerance tolerance))))

; w/ stream-ref
(define (stream-limit S tolerance)
  (if (<= (abs (- (stream-ref S 0) (stream-ref S 1))) tolerance)
      (stream-ref S 1)
      (stream-limit (stream-cdr S) tolerance)))

;; 3.65: Similar to how we computed pi-stream, compute three sequences for ln2 = 1 - 1/2 + 1/3 - 1/4 + ...
(define (ln2-summands n)
      (cons-stream (/ 1.0 n) (stream-map - (ln2-summands (+ n 1)))))

; initial
(define ln2
  (partial-sums (ln2-summands 1)))

; accelerated
(define ln2-accelerate
  (euler-transform ln2))

; super-accelerated tableau
(define ln2-tableau
  (accelerated-sequence euler-transform ln2))

;; stream-pairs

; combine two infinite streams by interleaving them, not appending since appending requires
;    finishing first before next stream which is impossible for infinite streams
(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
                   (interleave s2 (stream-cdr s1)))))

(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave ; combine streams
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))

;; 3.66: What does (pairs integers integers) look like? How many pairs precede (1, 100)? (99, 100)? (100, 100)?
(define a (pairs integers integers))

; (1, 100) will occur at about the 197th index b/c pairs w/ (1, i) alternate between every other pair

; matrix interwoven looks like:
;(s1, t1) (s1, t2) (s1, t3) (s1, t4) ...
;         (s2, t2) (s2, t3) (s2, t4) ...
;                  (s3, t3) (s3, t4) ...
;                           (s4, t4) ...
; --> order is (s1, t1), (s1, t2), (s2, t2), (s1, t3), (s2, t3), (s1, t4) ...
; kind of this HUGE zig-zag that alternates back to the first row then finds the furthest upper left entry untouched

; (99, 100) will take around 2 ^ 99 - 1 + 2 ^ (99 - 1) b/c it has to go through 99 rows and 100 columns + the alternating prior entries
; (100, 100) will take around 2 ^ 100 - 1

;; 3.67: Refactor pairs to produce ALL pairs
(define (all-pairs s t)
  (cons-stream (list (stream-car s) (stream-car t))
               (interleave
                (interleave
                 (stream-map (lambda (x) (list (stream-car s) x)) (stream-cdr t))
                 (stream-map (lambda (x) (list x (stream-car s))) (stream-cdr t)))
                (all-pairs (stream-cdr s) (stream-cdr t)))))

(define all (all-pairs integers integers))

;; 3.68: Louis reasoner pairs to remove first part
(define (reasoner-pairs s t)
  (interleave
   (stream-map (lambda (x) (list (stream-car s) x)) t)
   (reasoner-pairs (stream-cdr s) (stream-cdr t))))

; Goes on infinitely b/c interleave will always try to evaluate second arg first due to scheme's eager applicative order evaluation
;    t has no need to be evaluated so reasoner-pairs is called... infinitely
   

;; 3.69: triples proc to create all pairs of triples (S_i, T_j, U_k) from streams S, T, U where i <= j <= k
(define (triples S T U)
  (cons-stream
   (list (stream-car S) (stream-car T) (stream-car U))
   (interleave
    (stream-map (lambda (pair) (list (stream-car S) (car pair) (cadr pair))) (pairs T (stream-cdr U)))
    (triples (stream-cdr S) (stream-cdr T) (stream-cdr U)))))

(define pythagorean-triples
  (stream-filter
   (lambda (triple) (= (+ (square (car triple)) (square (cadr triple))) (square (caddr triple))))
   (triples integers integers integers)))

;; 3.70: weighted pairs
(define (weighted-merge S T weight-func)
  (cond ((stream-null? S) T)
        ((stream-null? T) S)
        (else
         (let ((w1 (weight-func (stream-car S))) (w2 (weight-func (stream-car T))))
            (cond ((< w1 w2) (cons-stream (stream-car S) (weighted-merge (stream-cdr S) T weight-func)))
                  ((> w1 w2) (cons-stream (stream-car T) (weighted-merge S (stream-cdr T) weight-func)))
                  (else (cons-stream (stream-car S)
                                     (cons-stream
                                      (stream-car T)
                                      (weighted-merge (stream-cdr S) (stream-cdr T) weight-func)))))))))

(define (weighted-pairs S T weight-func)
  (if (< (stream-car T) (stream-car S))
      the-empty-stream
      (cons-stream
       (list (stream-car S) (stream-car T))
       (weighted-merge
        (stream-map (lambda (x) (list (stream-car S) x)) (stream-cdr T))
        (weighted-merge
         (weighted-pairs (stream-cdr S) T weight-func)
         (weighted-pairs (stream-cdr S) (stream-cdr T) weight-func)
         weight-func)
        weight-func))))
          

; a. Weight(i, j) = i + j where i <= j
(define ordered-added-integer-sums (weighted-pairs integers integers (lambda (pair) (+ (car pair) (cadr pair)))))

; b. Weight(i, j) = 2i + 3j + 5ij
(define (divisible-by-235 cand)
  (or (= 0 (remainder cand 2)) (= 0 (remainder cand 3)) (= 0 (remainder cand 5))))

(define ordered-not-235
  (stream-filter
   (lambda (pair)
     (let ((i (car pair)) (j (cadr pair)))
       (not (or (divisible-by-235 i) (divisible-by-235 j)))))
   (weighted-pairs
    integers
    integers
    (lambda (pair)
      (let ((i (car pair)) (j (cadr pair)))
        (+ (* 2 i) (* 3 j) (* 5 (* i j))))))))

;; 3.71: Ramunajan numbers -- sum of two cubes in more than one way
(define (cube x)
  (* x x x))
(define (cubic-weight pair)
  (+ (cube (car pair)) (cube (cadr pair))))

(define ramanujan-numbers
  (let ()
    (define cubic-pairs (weighted-pairs integers integers cubic-weight))
    (define (generate-ramanujan-numbers cands)
      (if (= (cubic-weight (stream-ref cands 0)) (cubic-weight (stream-ref cands 1)))
          (cons-stream
           (cubic-weight (stream-car cands))
           (generate-ramanujan-numbers (stream-cdr (stream-cdr cands))))
          (generate-ramanujan-numbers (stream-cdr cands))))
    (generate-ramanujan-numbers cubic-pairs)))

;; 3.72: Sum of two squares that can be written three ways
(define (square-sum pair)
      (+ (square (car pair)) (square (cadr pair))))

(define (go-forward-in stream n)
  (if (<= n 0)
      stream
      (go-forward-in (stream-cdr stream) (- n 1))))

(define square-sums-written-three-ways
  (let ()
    (define square-pairs (weighted-pairs integers integers square-sum))
    (define (generate-square-sums-written-three-ways cands)
      (if (and (= (square-sum (stream-ref cands 0)) (square-sum (stream-ref cands 1)))
               (= (square-sum (stream-ref cands 0)) (square-sum (stream-ref cands 2))))
          (cons-stream
           (square-sum (stream-car cands))
           (generate-square-sums-written-three-ways (go-forward-in cands 3)))
          (generate-square-sums-written-three-ways (stream-cdr cands))))
    (generate-square-sums-written-three-ways square-pairs)))



;; integrate over streams
(define (integral integrand initial-value dt)
  (define int
    (cons-stream
     initial-value
     (add-streams (scale-stream integrand dt) int)))
  int)

;; 3.73: RC Circuit
(define (RC R C dt)
  (lambda (i-stream v0)
    (add-streams
     (scale-stream i-stream R)
     (scale-stream (integral i-stream v0 dt) (/ 1 C)))))
        
(define current (create-stream (list 1 2 1.5 1 0.5 -0.1 -2 -3 -2 -0.5 0.2 3 4)))
(define RC1 (RC 5 1 1))
; (show-stream (RC1 current 0) 10)

;; 3.74: Generalize zero-crossings proc that detects change in voltage direction (+ -> - or - -> +)
(define (zero-crossings sense-data)
  (define (sign-change-detector x y)
      (cond ((and (< x 0) (> y 0)) 1)
            ((and (> x 0) (< y 0)) -1)
            (else 0)))
  (stream-map sign-change-detector (cons-stream 0 sense-data) sense-data))