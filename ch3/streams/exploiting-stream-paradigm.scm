#lang sicp
(define (square x)
  (* x x))

;; stream primitives
(define (stream-car stream)
  (car stream))

(define (stream-cdr stream)
  (force (cdr stream)))

;; stream functors
(define (stream-filter pred? stream)
  (cond ((stream-null? stream) stream)
        ((pred? (stream-car stream))
         (cons-stream (stream-car stream) (stream-filter pred? (stream-cdr stream))))
        (else (stream-filter pred? (stream-cdr stream)))))

(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))

(define (stream-map proc . streams)
  (cons-stream (apply proc (map stream-car streams))
               (apply stream-map (cons proc (map stream-cdr streams)))))

(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))


;; stream helpers
(define (show-stream S n)
  (if (= n 0)
      (display (stream-car S))
      (begin
        (display (stream-car S))
        (newline)
        (show-stream (stream-cdr S) (- n 1)))))


(define (add-streams s1 s2)
  (stream-map + s1 s2))

; test streams
(define ones
  (cons-stream 1 ones))

(define integers
  (cons-stream 1 (add-streams ones integers)))

; revamp of improve sqrt function from ch1
; streams "improvements" to sqrt improve
(define (average a b)
  (/ (+ a b) 2))
(define (sqrt-improve guess x) (average guess (/ x guess)))
(define (sqrt-stream x)
  (define guesses
    (cons-stream 1.0 (stream-map (lambda (guess) (sqrt-improve guess x)) guesses)))
  guesses)

; partial sums and scale-stream as foundations for pi-stream
(define (partial-sums stream)
  (cons-stream (stream-car stream) (stream-map (lambda (x) (+ x (stream-car stream))) (partial-sums (stream-cdr stream)))))

(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor)) stream))

; pi approximation
(define (pi-summands n)
  (cons-stream (/ 1.0 n) (stream-map - (pi-summands (+ n 2)))))

(define pi-stream
  (scale-stream (partial-sums (pi-summands 1)) 4))

; accelerator to converge to infinite sum approximation
(define (euler-transform s)
  (let ((s0 (stream-ref s 0)) (s1 (stream-ref s 1)) (s2 (stream-ref s 2)))
    (cons-stream
     (- s2 (/ (square (- s2 s1)) (+ s0 (* -2 s1) s2)))
     (euler-transform (stream-cdr s)))))


; tableau: accelerate the accelerator by recursively calling it on a stream
(define (make-tableau transform s)
  (cons-stream (stream-car s) (make-tableau transform (transform s))))

(define (accelerated-sequence transform s)
  (stream-map stream-car (make-tableau transform s)))

;; 3.63: Why is sqrt-stream below less efficient than one defined earlier in section?
(define (louis-reasoner-sqrt-stream x)
  (cons-stream 1.0 (stream-map (lambda (guess) (sqrt-improve guess x)) (louis-reasoner-sqrt-stream x))))

; Since earlier proc calls internally defined guesses proc -- it allows for that function to be memoized since it's stored in memory.
;    sqrt-stream above doesn't memoize calls to earlier guesses. It calls stream-cdr redundantly since it must go through first
;        parts of stream to get values that determine later parts.
;    If implementation of delay didn't include memo-proc, then these procs would hold same efficiency


;; 3.64: stream-limit -- find difference of two successive elements within tolerance
(define (stream-limit S tolerance)
  (define (prev-stream stream last)
    (cond ((<= (abs (- (stream-car stream) last)) tolerance) (stream-car stream))
          (else (prev-stream (stream-cdr stream) (stream-car stream)))))
  (prev-stream S (- (stream-car S) (+ tolerance tolerance))))


