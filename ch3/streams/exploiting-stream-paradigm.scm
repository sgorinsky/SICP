#lang sicp

;; stream primitives
(define (stream-car stream)
  (car stream))

(define (stream-cdr stream)
  (force (cdr stream)))

;; stream helper
(define (show-stream S n)
  (if (= n 0)
      (display (stream-car S))
      (begin
        (display (stream-car S))
        (newline)
        (show-stream (stream-cdr S) (- n 1)))))

;; Stream functors
(define (stream-filter pred? stream)
  (cond ((stream-null? stream) stream)
        ((pred? (stream-car stream))
         (cons-stream (stream-car stream) (stream-filter pred? (stream-cdr stream))))
        (else (stream-filter pred? (stream-cdr stream)))))


(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))

(define (stream-map proc . streams)
  (cons-stream (apply proc (map stream-car streams))
               (apply stream-map (cons proc (map stream-cdr streams)))))

(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
      (begin (proc (stream-car s))
             (stream-for-each proc (stream-cdr s)))))

; revamp of improve sqrt function from ch1
; streams "improvements" to sqrt improve
(define (sqrt-stream x)
  (define (average a b)
    (/ (+ a b) 2))
  (define (sqrt-improve guess x) (average guess (/ x guess)))
  (define guesses
    (cons-stream 1.0 (stream-map (lambda (guess) (sqrt-improve guess x)) guesses)))
  guesses)